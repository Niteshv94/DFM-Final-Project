// Generated by Selenium IDE

package dfm;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.openqa.selenium.JavascriptExecutor;
import java.util.*;
import java.time.Duration;

public class AutomateDecisionTest {
	private WebDriver driver;
	private Map<String, Object> vars;
	JavascriptExecutor js;

	@BeforeClass
	public void setUp() {
		System.setProperty("webdriver.chrome.driver", "./Driver/chromedriver.exe");
		driver = new ChromeDriver();
		js = (JavascriptExecutor) driver;
		vars = new HashMap<String, Object>();
	}

	@AfterClass
	public void tearDown() {
		// driver.quit();
	}

	public String waitForWindow(int timeout) {
		try {
			Thread.sleep(timeout);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		Set<String> whNow = driver.getWindowHandles();
		Set<String> whThen = (Set<String>) vars.get("window_handles");
		if (whNow.size() > whThen.size()) {
			whNow.removeAll(whThen);
		}
		return whNow.iterator().next();
	}

	@Test(priority = 1)
	public void enterAutomateDecisionDetails() throws InterruptedException {
		driver.get("https://qa.modeler2.decisionsfirst.com/login");

		// 2 | setWindowSize | 1126x602 |
		driver.manage().window().maximize();
		// 3 | click | css=.form-group:nth-child(2) > .form-control |
		driver.findElement(By.cssSelector(".form-group:nth-child(2) > .form-control")).click();
		// 4 | type | xpath=//input[@type='text'] | test_claim2@gmail.com
		driver.findElement(By.xpath("//input[@type=\'text\']")).sendKeys("nitesh@rxw.com");
		// 5 | click | css=.ng-untouched |
		driver.findElement(By.cssSelector(".ng-untouched")).click();
		// 6 | type | xpath=//input[@type='password'] | defaultUserPass@123
		driver.findElement(By.xpath("//input[@type=\'password\']")).sendKeys("defaultUserPass@123");
		// 7 | click | css=.btn |
		driver.findElement(By.cssSelector(".btn")).click();
		Thread.sleep(15000);

		// 8 | waitForElementVisible | css=.sidebar-control-button | 30000
		{
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(50));
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".sidebar-control-button")));
		}
		{
			WebElement element = driver.findElement(By.cssSelector(".btn"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		{
			WebElement element = driver.findElement(By.tagName("body"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element, 0, 0).perform();
		}
		driver.findElement(By.cssSelector(".sidebar-control-button")).click();
		driver.findElement(By.cssSelector(".add-object-sidebar-panel > .item-text")).click();
		driver.findElement(By.id("addDecision")).click();
		{
			WebElement element = driver.findElement(By.cssSelector("#decisionDescription .ql-italic"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		{
			WebElement element = driver.findElement(By.tagName("body"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element, 0, 0).perform();
		}
		{
			WebElement element = driver.findElement(By.cssSelector("#decisionDescription .ql-underline"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		{
			WebElement element = driver.findElement(By.tagName("body"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element, 0, 0).perform();
		}
		{
			WebElement element = driver.findElement(By.cssSelector("#decisionDescription .ql-list:nth-child(5)"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		{
			WebElement element = driver.findElement(By.tagName("body"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element, 0, 0).perform();
		}
		driver.findElement(By.xpath("//core-edit-multiple-lines-control[@id='decisionName']/quill-editor/div[2]/div/p"))
				.click();
		{
			WebElement element = driver.findElement(By.cssSelector("#decisionDescription .ql-strike"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		{
			WebElement element = driver.findElement(By.tagName("body"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element, 0, 0).perform();
		}
//    {
//      WebElement element = driver.findElement(By.cssSelector(".rich-text-editor-focus > .ql-editor"));
//      js.executeScript("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>Decision Test remo</p>'}", element);
//    }
		driver.findElement(By.cssSelector(".rich-text-editor-focus > .ql-editor")).sendKeys("Decision Test remo");
		driver.findElement(By.cssSelector(".rich-text-editor-focus p")).click();
//    {
//      WebElement element = driver.findElement(By.cssSelector(".rich-text-editor-focus > .ql-editor"));
//      js.executeScript("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>This is testing remo</p>'}", element);
//    }
		driver.findElement(
				By.xpath("//core-edit-multiple-lines-control[@id='decisionDescription']/quill-editor/div[2]/div"))
				.sendKeys("This is testing remo");

//    driver.findElement(By.id("decisionType")).click();
//    {
//      WebElement dropdown = driver.findElement(By.id("decisionType"));
//      dropdown.findElement(By.xpath("//option[. = 'Tactical']")).click();
//    }

		Select drpCountry = new Select(driver.findElement(By.id("decisionType")));
		drpCountry.selectByValue("TACTICAL");

		driver.findElement(By.id("decisionStatusLevel")).click();
		driver.findElement(By.id("decisionStatusLevel")).click();
		driver.findElement(By.id("decisionUrl")).click();
		driver.findElement(By.id("decisionUrl")).sendKeys("google.com");
		driver.findElement(By.cssSelector(".ql-blank > p")).sendKeys("What is Test remo?");
//    {
//      WebElement element = driver.findElement(By.cssSelector(".rich-text-editor-focus > .ql-editor"));
//      js.executeScript("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>What is Test remo?</p>'}", element);
//    }

//    driver.findElement(By.cssSelector(".cdk-focused")).click();
//    {
//      WebElement element = driver.findElement(By.cssSelector(".ng-valid > .select-button"));
//      Actions builder = new Actions(driver);
//      builder.moveToElement(element).perform();
//    }
//    {
//      WebElement element = driver.findElement(By.tagName("body"));
//      Actions builder = new Actions(driver);
//      builder.moveToElement(element, 0, 0).perform();
//    }
//    driver.findElement(By.id("nb-option-1")).click();
//    driver.findElement(By.cssSelector(".placeholder")).click();
//    {
//      WebElement element = driver.findElement(By.cssSelector(".placeholder"));
//      Actions builder = new Actions(driver);
//      builder.moveToElement(element).perform();
//    }
//    {
//      WebElement element = driver.findElement(By.tagName("body"));
//      Actions builder = new Actions(driver);
//      builder.moveToElement(element, 0, 0).perform();
//    }

		driver.findElement(By.xpath("//button[normalize-space()='Select Project']")).click();
		{
			WebElement dropdown = driver.findElement(By.xpath("//button[normalize-space()='Select Project']"));
			dropdown.findElement(By.xpath("//nb-option[contains(text(),'root')]")).click();
		}

		driver.findElement(By.xpath("//button[normalize-space()='Select Folder']")).click();
		{
			WebElement dropdown = driver.findElement(By.xpath("//button[normalize-space()='Select Folder']"));
			dropdown.findElement(By.xpath("//nb-option[contains(text(),'untag')]")).click();
		}

		// driver.findElement(By.id("nb-option-345")).click();
		driver.findElement(By.cssSelector(".btn-block")).click();
		Thread.sleep(8000);
		driver.findElement(By.cssSelector(".mr-2 .form-control")).click();
		driver.findElement(By.xpath("(//input[@type='text'])[2]")).sendKeys("Decision Test remo");
		driver.findElement(By.cssSelector(".mr-2 .btn")).click();
		Thread.sleep(5000);
		// driver.findElement(By.cssSelector(".ng-star-inserted > .item-name
		// .item-name")).click();
		// driver.findElement(By.cssSelector(".rich-text-editor-focus p")).click();

		driver.findElement(By.xpath("//span[normalize-space()='| Decision Test remo']")).click();
//    {
//      WebElement element = driver.findElement(By.xpath("//core-edit-multiple-lines-control[@id='decisionPrefix']/quill-editor/div[2]/div/p"));
//      js.executeScript("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = 'Hello remo'}", element);
//    }
//    driver.findElement(By.cssSelector(".rich-text-editor-focus p")).click();
		Thread.sleep(5000);
		driver.findElement(By.xpath("//core-edit-multiple-lines-control[@id='decisionPrefix']//p"))
				.sendKeys("Hello remo");
		Thread.sleep(4000);
		driver.findElement(By.xpath("//*[@id=\"decisionName\"]/quill-editor/div[2]/div[1]/p")).sendKeys(" Updated");
		Thread.sleep(4000);
		driver.findElement(By.xpath("//*[@id=\"decisionDescription\"]/quill-editor/div[2]/div[1]"))
				.sendKeys(" Updated description");
		Thread.sleep(4000);

//    {
//      WebElement element = driver.findElement(By.cssSelector("#decisionDescription .ql-underline"));
//      Actions builder = new Actions(driver);
//      builder.moveToElement(element).perform();
//    }
//    {
//      WebElement element = driver.findElement(By.tagName("body"));
//      Actions builder = new Actions(driver);
//      builder.moveToElement(element, 0, 0).perform();
//    }
//    {
//      WebElement element = driver.findElement(By.cssSelector(".rich-text-editor-focus > .ql-editor"));
//      js.executeScript("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>Decision Test Updated remo</p>'}", element);
//    }
//    driver.findElement(By.cssSelector(".rich-text-editor-focus p")).click();
//    {
//      WebElement element = driver.findElement(By.cssSelector(".rich-text-editor-focus > .ql-editor"));
//      js.executeScript("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>This is testing updated remo</p>'}", element);
//    }
		driver.findElement(By.cssSelector(".header-block:nth-child(5) > .eva-plus-circle-outline")).click();
//    driver.findElement(By.id("type")).click();
//    {
//      WebElement dropdown = driver.findElement(By.id("type"));
//      dropdown.findElement(By.xpath("//option[. = 'Operational']")).click();
//    }

		driver.findElement(By.id("type")).click();
		{
			WebElement dropdown = driver.findElement(By.id("type"));
			dropdown.findElement(By.xpath("//option[@value='TACTICAL']")).click();
		}

		driver.findElement(By.id("statusLevel")).click();
		driver.findElement(By.id("statusLevel")).click();
		vars.put("window_handles", driver.getWindowHandles());
		driver.findElement(By.cssSelector(".btn-url")).click();
		vars.put("win5819", waitForWindow(2000));
		vars.put("root", driver.getWindowHandle());
		driver.switchTo().window(vars.get("win5819").toString());
		driver.close();
		driver.switchTo().window(vars.get("root").toString());

//    driver.findElement(By.cssSelector(".rich-text-editor-focus p")).click();
//    {
//      WebElement element = driver.findElement(By.cssSelector(".rich-text-editor-focus > .ql-editor"));
//      js.executeScript("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>What is Test Updated remo?</p>'}", element);
//    }

		driver.findElement(By.xpath("//*[@id=\"decisionQuestion\"]/quill-editor/div[2]/div[1]/p")).clear();
		driver.findElement(By.xpath("//*[@id=\"decisionQuestion\"]/quill-editor/div[2]/div[1]/p"))
				.sendKeys("What is Test Updated remo?");

//    driver.findElement(By.cssSelector(".form-group:nth-child(1) > .form-control")).click();
//    {
//      WebElement dropdown = driver.findElement(By.cssSelector(".form-group > .ng-dirty"));
//      dropdown.findElement(By.xpath("//option[. = 'Defined List']")).click();
//    }

		driver.findElement(By.xpath("//select[@formcontrolname='answerTypeId']")).click();
		{
			WebElement dropdown = driver.findElement(By.id("type"));
			dropdown.findElement(By.xpath("//*[@id=\"answerType\"]/div/div[1]/select/option[2]")).click();
		}
		Thread.sleep(2000);
		js.executeScript("window.scrollTo(0,0)");
		driver.findElement(By.id("newAnswerItemInput")).click();
		driver.findElement(By.id("newAnswerItemInput")).sendKeys("Test Answer Value remo");
		driver.findElement(By.id("defaultAnswerItem")).click();
		driver.findElement(By.id("btnAddAnswerItem")).click();
		Thread.sleep(2000);

		driver.findElement(By.id("defaultAnswerItem")).click();
		{
			WebElement dropdown = driver.findElement(By.id("defaultAnswerItem"));
			dropdown.findElement(By.xpath("//option[normalize-space()='Test Answer Value remo']")).click();
		}
		Thread.sleep(2000);
//    driver.findElement(By.cssSelector(".ng-untouched:nth-child(2) .ql-container")).click();
//    {
//      WebElement element = driver.findElement(By.cssSelector(".rich-text-editor-focus > .ql-editor"));
//      js.executeScript("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>Done remo</p>'}", element);
//    }
		driver.findElement(By.xpath(
				"/html/body/dfm-root/dfm-main-container/nb-layout/div[1]/div/div/div/div/nb-layout-column/dfm-tabs-container/div/div/div[3]/dfm-edit-decision-container/nb-card/div/div[2]/div[2]/dfm-question-and-answers/form/div[2]/dfm-decision-answer/form/div/div[3]/dfm-decision-answer-supporting-information/div/div/core-edit-multiple-lines-control/quill-editor/div[2]/div[1]/p"))
				.sendKeys("This is supporting information");
		Thread.sleep(3000);
		// driver.findElement(By.cssSelector(".tab-item")).click();
	}

	@Test(priority = 2)
	public void verifyAutomateDecision() throws InterruptedException {

		// close the open tab
		driver.findElement(By.xpath("//*[@id=\"tab-container\"]/li[3]/div/i")).click();
		Thread.sleep(2000);

		driver.findElement(By.xpath(
				"//dfm-search-control[@ng-reflect-search-action='class UpdateSearchForMainSearc']//input[@placeholder='Search']"))
				.clear();
		driver.findElement(By.xpath(
				"//dfm-search-control[@ng-reflect-search-action='class UpdateSearchForMainSearc']//input[@placeholder='Search']"))
				.sendKeys("Decision Test remo Updated");
		Thread.sleep(2000);

		driver.findElement(By.xpath(
				"/html/body/dfm-root/dfm-main-container/nb-layout/div/div/div/div/div/nb-layout-column/dfm-tabs-container/div/div/div[2]/dfm-search-container/nb-card/div/div[2]/div[2]/dfm-infinite-search-list/nb-list/nb-list-item/dfm-preview-container/div/dfm-search-list-item/div/div/span/span[2]"))
				.click();
		Thread.sleep(5000);

	}

	@Test(priority = 3)
	public void validateAutomateDecision() throws InterruptedException {

		String verifyPrefix = driver
				.findElement(By.xpath("//core-edit-multiple-lines-control[@id='decisionPrefix']//p")).getText();
		System.out.println(verifyPrefix);
		Thread.sleep(1000);
		String verifyName = driver.findElement(By.xpath("//*[@id=\"decisionName\"]/quill-editor/div[2]/div[1]/p"))
				.getText();
		System.out.println(verifyName);
		Thread.sleep(1000);
		String verifyDescription = driver
				.findElement(By.xpath("//*[@id=\"decisionDescription\"]/quill-editor/div[2]/div[1]")).getText();
		System.out.println(verifyDescription);
		Thread.sleep(1000);
		String verifyQuestion = driver
				.findElement(By.xpath("//*[@id=\"decisionQuestion\"]/quill-editor/div[2]/div[1]/p")).getText();
		System.out.println(verifyQuestion);
		Thread.sleep(1000);
		String verifyAnswerValue = driver
				.findElement(By.xpath("//select[@id='defaultAnswerItem']")).getText();
		System.out.println(verifyAnswerValue);
		Thread.sleep(1000);
		String verifySupportingInformation = driver
				.findElement(By.xpath("/html/body/dfm-root/dfm-main-container/nb-layout/div[1]/div/div/div/div/nb-layout-column/dfm-tabs-container/div/div/div[3]/dfm-edit-decision-container/nb-card/div/div[2]/div[2]/dfm-question-and-answers/form/div[2]/dfm-decision-answer/form/div/div[3]/dfm-decision-answer-supporting-information/div/div/core-edit-multiple-lines-control/quill-editor/div[2]/div[1]/p")).getText();
		System.out.println(verifySupportingInformation);
		Thread.sleep(1000);
	}

}
