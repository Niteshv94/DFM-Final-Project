// Generated by Selenium IDE

//Script for creating a new tag

package dfm;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Reporter;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.dfm.utility.Helper;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;

import java.util.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.time.Duration;

public class DeleteObjects {
	private static WebDriver driver;
	private Map<String, Object> vars;
	JavascriptExecutor js;

	ExtentSparkReporter sparkReporter;
	public static ExtentReports reports;
	static ExtentTest extentTest;

	Reporter report = new Reporter();

	@BeforeClass
	public void setUp() {
		System.setProperty("webdriver.chrome.driver", "./Driver/chromedriver.exe");
		driver = new ChromeDriver();

//		System.setProperty("webdriver.edge.driver", "./Driver/msedgedriver.exe");
//		driver = new EdgeDriver();
	}

	@BeforeSuite(alwaysRun = true)
	public void setUpReport() {

		// start reporters
		// sparkReporter = new
		// ExtentSparkReporter("./Reports/login_DD-MM-YYYY_HH-MM-SS.html");
		sparkReporter = new ExtentSparkReporter(new File(System.getProperty("user.dir")
				+ "./Reports/Delete/DFM_DeleteObjects_" + Helper.getCurrentDateTime() + ".html"));
		reports = new ExtentReports();
		reports.attachReporter(sparkReporter);

	}

	@AfterClass
	public void tearDown() {
		// driver.quit();
		// workbook.close();
	}

	@Test(priority = 1)
	public void loginToApplication() throws InterruptedException, IOException {
		login();
		searchDiagram();
	}

	@Test(priority = 2)
	public void sarchDiagram() throws InterruptedException, IOException {

		deleteSearchDiagram();
	}

	@Test(priority = 3)
	public void validateDiagram() throws InterruptedException, IOException {
		navigateToSearchDiagram();
		Thread.sleep(5000);
		// searchDiagram();
	}

	@Test(priority = 4)
	public void deleteDiagram() throws InterruptedException, IOException {
		deleteSearchDiagram();
	}

	public static void login() throws InterruptedException, IOException {

		// reports.createTest("Login");
		Reporter.log("Test Case for Delete Objects");
		extentTest = reports.createTest("Login", "Login to DFM Application");
		// log with snapshot
//				extentTest.pass("Details",
//						MediaEntityBuilder.createScreenCaptureFromPath("./Screenshots/screenshot.png").build());
		// test with snapshot
		extentTest.addScreenCaptureFromPath("screenshot.png");

		// log(Status, details)
		extentTest.log(Status.INFO, "Starting Test Case");

		// For A Environment
		// 1 | open | https://qa.modeler2.decisionsfirst.com/login |
		driver.get("https://qa.modeler2.decisionsfirst.com/login");
		extentTest.pass("Navigates to DFM URL");

		// For Openshift Environment
		// driver.get("https://modeler2-dfm-dms.apps.oc-prod.decisionsfirst.com/login");

		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		// 2 | setWindowSize | 1183x602 |
		driver.manage().window().maximize();
		// 3 | click | css=.form-group:nth-child(2) > .form-control |
		driver.findElement(By.cssSelector(".form-group:nth-child(2) > .form-control")).click();
		// 4 | type | css=.ng-valid | test_claim2@gmail.com
		driver.findElement(By.xpath("//input[@type=\'text\']")).sendKeys("Admin@random.com");
		// 5 | click | css=.ng-untouched |
		driver.findElement(By.cssSelector(".ng-untouched")).click();
		// 6 | type | css=.ng-untouched | defaultUserPass@123
		driver.findElement(By.xpath("//input[@type=\'password\']")).sendKeys("defaultUserPass@123");
		// 7 | click | css=.btn |
		driver.findElement(By.cssSelector(".btn")).click();
		//Thread.sleep(12000);
		// 8 | waitForElementVisible | css=.sidebar-control-button | 30000
		{
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(50));
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".sidebar-control-button")));
		}

		/*
		 * WebElement close_option_tab =
		 * driver.findElement(By.xpath("//button[normalize-space()='CLOSE']")); if
		 * (close_option_tab.isDisplayed()) { close_option_tab.click();
		 * 
		 * } else {
		 * System.out.println("Wijmo Evaluation Version (5.20213.824) is not available"
		 * );
		 * 
		 * }
		 */
		extentTest.pass("Login Successfull");
		Thread.sleep(4000);

	}

	public static void searchDiagram() throws InterruptedException, IOException {

		// Get the xpath and Tag data form Excel Sheet
		File src = new File("./Test Data/TestData.xlsx");
		FileInputStream fis = new FileInputStream(src);
		XSSFWorkbook workbook = new XSSFWorkbook(fis);

		XSSFSheet sheet = workbook.getSheet("DeleteDiagram");

		String searchDiagram = sheet.getRow(1).getCell(0).getStringCellValue();

		// 11 | type | id=search-ip | dummy
		driver.findElement(By.xpath(
				"//dfm-search-control[@ng-reflect-search-action='class UpdateSearchForHomeSearc']//input[@placeholder='Search']"))
				.sendKeys(searchDiagram);
		extentTest.pass("Entered Search Diagram");
	}

	public static void navigateToSearchDiagram() throws InterruptedException, IOException {

		Thread.sleep(3000);
		driver.findElement(By.xpath("//span[@class='item-name full-type-item-name']")).click();

//		String delete_message = driver.findElement(By.xpath("//span[@class='title subtitle']")).getText();
//		System.out.println("Message after deletion of diagram is : " + delete_message);
		Thread.sleep(5000);
		driver.findElement(By.xpath(
				"//dfm-diagram-sidebar[@ng-reflect-diagram='[object Object]']//i[@class='eva eva-settings-2-outline']"))
				.click();
		extentTest.pass("Navigate to Canvas Successfull");

	}

	public static void deleteSearchDiagram() throws InterruptedException, IOException {

		Thread.sleep(3000);

		WebElement target = driver.findElement(By.xpath("/html/body/dfm-root/dfm-main-container/nb-layout/div/div/div/div/div/nb-layout-column/dfm-tabs-container/div/div/div[2]/dfm-view-diagram-container/div/div/dfm-go-js-display-diagram/div/div"));

		// Remove the diagram permanently
		Actions act = new Actions(driver);
//		act.moveToElement(target);
//		act.click().build().perform();
//		act.keyDown(Keys.CONTROL).sendKeys("a");
//		act.keyUp(Keys.CONTROL).build().perform();
//		Thread.sleep(3000);
		extentTest.pass("Selected Diagram");

		//1st diagram
		act.moveToElement(target, 255, 75);
		act.contextClick().build().perform();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//span[contains(text(),'Remove Permanently')]")).click();
		Thread.sleep(3000);
		driver.navigate().refresh();
		{
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(50));
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//i[@class='eva eva-settings-2-outline']")));
		}
		
		// Click Outside
//				act.moveToElement(target, -1, -1);
//				act.click().build().perform();
				Thread.sleep(2000);
		
		//2nd diagram
		act.moveToElement(target, 155, 75);
		act.contextClick().build().perform();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//span[contains(text(),'Remove Permanently')]")).click();
		Thread.sleep(3000);
		// Click Outside
		act.moveToElement(target, -1, -1);
		act.click().build().perform();
		Thread.sleep(2000);
		
		//3rd diagram
		act.moveToElement(target, 305, -45);
		act.contextClick().build().perform();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//span[contains(text(),'Remove Permanently')]")).click();
		Thread.sleep(3000);

		extentTest.pass("Deleted Diagram");
		extentTest.log(Status.INFO, "Test Completed");

	}

	@AfterSuite(alwaysRun = true)
	public void tearDownReport() {

		// calling flush writes everything to the log file
		reports.flush();
	}

}
