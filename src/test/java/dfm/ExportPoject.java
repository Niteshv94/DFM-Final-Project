// Generated by Selenium IDE
package dfm;

import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.openqa.selenium.JavascriptExecutor;
import java.util.*;
import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.Duration;

public class ExportPoject {
	private static WebDriver driver;
	private Map<String, Object> vars;
	JavascriptExecutor js;

//	public static void main(String[] args) throws InterruptedException, IOException {
//		setUp();
//		addProject();
//	}

	@BeforeClass
	public void setUp() {
		System.setProperty("webdriver.chrome.driver", "./Driver/chromedriver.exe");
		driver = new ChromeDriver();

//		System.setProperty("webdriver.edge.driver", "./Driver/msedgedriver.exe");
//		driver = new EdgeDriver();
	}

	@AfterClass
	public void tearDown() {
		// driver.quit();
	}

	@Test(priority = 1)
	public static void loginAction() throws InterruptedException, IOException {
		// Test name: Add Project
		// Step # | name | target | value

		// For QA Environment
		// 1 | open | https://qa.modeler2.decisionsfirst.com/login |
		driver.get("https://qa.modeler2.decisionsfirst.com/login");

		// For Openshift Environment
		// driver.get("https://modeler2-dfm-dms.apps.oc-prod.decisionsfirst.com/login");

		// 2 | setWindowSize | 1126x602 |
		driver.manage().window().maximize();
		// 3 | click | css=.form-group:nth-child(2) > .form-control |
		driver.findElement(By.cssSelector(".form-group:nth-child(2) > .form-control")).click();
		// 4 | type | xpath=//input[@type='text'] | test_claim2@gmail.com
		driver.findElement(By.xpath("//input[@type=\'text\']")).sendKeys("nitesh@rxw.com");
		// 5 | click | css=.ng-untouched |
		driver.findElement(By.cssSelector(".ng-untouched")).click();
		// 6 | type | xpath=//input[@type='password'] | defaultUserPass@123
		driver.findElement(By.xpath("//input[@type=\'password\']")).sendKeys("defaultUserPass@123");
		// 7 | click | css=.btn |
		driver.findElement(By.cssSelector(".btn")).click();
		Thread.sleep(15000);

		// 8 | waitForElementVisible | css=.sidebar-control-button | 30000
		{
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(50));
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".sidebar-control-button")));
		}
	}

	@Test(priority = 2)
	public void addProject() throws InterruptedException, IOException {

		Thread.sleep(3000);
		// 9 | click | css=.sidebar-control-button |
		driver.findElement(By.cssSelector(".sidebar-control-button")).click();
		Thread.sleep(2000);
		// 10 | click | xpath=//span[contains(.,'Tag Explorer')] |
		driver.findElement(By.xpath("//span[contains(.,\'Tag Explorer\')]")).click();
		Thread.sleep(5000);
		// 11 | click | css=.eva-plus-circle-outline:nth-child(2) |
		/*
		 * driver.findElement(By.cssSelector(".eva-plus-circle-outline:nth-child(2)")).
		 * click(); Thread.sleep(5000); // 12 | click |
		 * css=.wj-listbox-item:nth-child(1) > div |
		 * driver.findElement(By.cssSelector(".wj-listbox-item:nth-child(1) > div")).
		 * click(); Thread.sleep(5000); // 13 | click | css=.rich-text-editor-focus p |
		 * driver.findElement(By.xpath(
		 * "//core-edit-multiple-lines-control[@id='name']/quill-editor/div[2]/div/p"))
		 * .click();
		 */
		// Thread.sleep(5000);

		// Get the Projet & Tag data form Excel Sheet
		File src = new File("./Test Data/TestData.xlsx");
		FileInputStream fis = new FileInputStream(src);
		XSSFWorkbook workbook = new XSSFWorkbook(fis);

		XSSFSheet sheet = workbook.getSheet("AddDiagramWithObjectsAndLinks");

		String projectName = sheet.getRow(1).getCell(0).getStringCellValue();
		String description = sheet.getRow(1).getCell(1).getStringCellValue();
		String branching = sheet.getRow(1).getCell(2).getStringCellValue();
		String searchProject = sheet.getRow(1).getCell(3).getStringCellValue();
		String projectName1 = sheet.getRow(1).getCell(4).getStringCellValue();
		String tagName = sheet.getRow(1).getCell(5).getStringCellValue();
		String tagDescription = sheet.getRow(1).getCell(6).getStringCellValue();
		String tagXpath = sheet.getRow(1).getCell(7).getStringCellValue();
		String diagramName = sheet.getRow(1).getCell(8).getStringCellValue();
		String diagramDescription = sheet.getRow(1).getCell(9).getStringCellValue();
		String knowledgeName = sheet.getRow(1).getCell(10).getStringCellValue();
		String inputName = sheet.getRow(1).getCell(11).getStringCellValue();
		String decisionName = sheet.getRow(1).getCell(12).getStringCellValue();

		/*
		 * driver.findElement(By.xpath(
		 * "//core-edit-multiple-lines-control[@id=\'name\']/quill-editor/div[2]/div"))
		 * .sendKeys(projectName);
		 * 
		 * // 15 | click | css=.ql-blank > p |
		 * driver.findElement(By.cssSelector(".ql-blank > p")).click();
		 * 
		 * driver.findElement(By.xpath(
		 * "//core-edit-multiple-lines-control[@id=\'description\']/quill-editor/div[2]/div"
		 * )) .sendKeys(description);
		 * 
		 * // 17 | click |
		 * xpath=//nb-radio[@id='item-enableSimpleBranching']/label/span[2] // |
		 * driver.findElement(By.xpath(branching)).click(); // 18 | click |
		 * xpath=//button[contains(.,'Add Project')] |
		 * driver.findElement(By.xpath("//button[contains(.,\'Add Project\')]")).click()
		 * ;
		 */

		// Add Tag

		Thread.sleep(5000);
		// 10 | click | id=search-ip |
		driver.findElement(By.id("search-ip")).click();
		// 11 | type | id=search-ip | dummy
		driver.findElement(By.id("search-ip")).sendKeys(searchProject);
		driver.findElement(By.xpath(
				"/html/body/dfm-root/dfm-main-container/nb-layout/div/div/div/div/div/nb-layout-column/dfm-tabs-container/div/div/div[2]/dfm-folders-tags-management-container/nb-card/div/div[1]/dfm-project-tree-view/div/div[2]/wj-tree-view/div/div[1]"))
				.click();
		Thread.sleep(2000);
		driver.findElement(By.xpath(tagXpath)).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//input[@placeholder='Search...']")).sendKeys(diagramName);
		Thread.sleep(1000);
		driver.findElement(By
				.xpath("//div[@class='search-container']//i[@class='btn btn-info eva eva-search-outline search-icon']"))
				.click();

		// identify element
		/*
		 * WebElement l = driver.findElement(By.xpath(projectName1)); // Actions class
		 * with moveToElement() and contextClick() Actions a = new Actions(driver);
		 * a.moveToElement(l).contextClick().build().perform(); Thread.sleep(2000);
		 * 
		 * // 13 | click | css=.rich-text-editor-focus p |
		 * driver.findElement(By.xpath("//div[contains(text(),'Add Tag')]")).click();
		 * 
		 * driver.findElement(By.
		 * xpath("//core-edit-multiple-lines-control[@id='name']//div[@class='ql-editor ql-blank']"
		 * )) .sendKeys(tagName);
		 * 
		 * driver.findElement( By.
		 * xpath("//core-edit-multiple-lines-control[@id='description']//div[@class='ql-editor ql-blank']"
		 * )) .sendKeys(tagDescription);
		 * 
		 * // 17 | click | css=.btn-block |
		 * driver.findElement(By.xpath("//button[contains(.,'Add Tag')]")).click();
		 * Thread.sleep(5000);
		 * 
		 * driver.findElement(By.xpath("//span[@class='wj-node-text has-text']")).click(
		 * );
		 * 
		 * // identify element WebElement tag = driver.findElement(By.xpath(tagXpath));
		 * // Actions class with moveToElement() and contextClick() Actions a1 = new
		 * Actions(driver); a1.moveToElement(tag).contextClick().build().perform();
		 * Thread.sleep(2000);
		 * driver.findElement(By.xpath("//div[contains(text(),'Create DRD')]")).click();
		 * Thread.sleep(2000);
		 * 
		 * driver.findElement(By.xpath(
		 * "//core-edit-multiple-lines-control[@id='diagramName']//p")).sendKeys(
		 * diagramName);
		 * 
		 * driver.findElement(By.xpath(
		 * "//core-edit-multiple-lines-control[@id='diagramDescription']//p"))
		 * .sendKeys(diagramDescription);
		 * 
		 * driver.findElement(By.xpath("//button[normalize-space()='Add Diagram']")).
		 * click(); Thread.sleep(5000);
		 * 
		 * 
		 * driver.findElement(By.xpath("//i[@class='eva eva-settings-2-outline']")).
		 * click(); Thread.sleep(4000);
		 * 
		 * Actions act = new Actions(driver);
		 * 
		 * WebElement src1 =
		 * driver.findElement(By.xpath("//div[@class='add-object-palette']//canvas"));
		 * 
		 * WebElement LINKS =
		 * driver.findElement(By.xpath("//div[@class='links-palette']"));
		 * 
		 * WebElement target =
		 * driver.findElement(By.xpath("//div[@class='diagramDiv']//canvas"));
		 * 
		 * XSSFSheet sheet1 = workbook.getSheet("AddDiagramWithObjectsAndLinks");
		 * 
		 * DataFormatter dataFormatter = new DataFormatter();
		 * 
		 * // Input data from excel for Input source String inputValue1 =
		 * dataFormatter.formatCellValue(sheet1.getRow(7).getCell(0)); int inputNumber1
		 * = Integer.parseInt(inputValue1);
		 * 
		 * String inputValue2 =
		 * dataFormatter.formatCellValue(sheet1.getRow(7).getCell(1)); int inputNumber2
		 * = Integer.parseInt(inputValue2);
		 * 
		 * String canvasCoordinates1 =
		 * dataFormatter.formatCellValue(sheet1.getRow(13).getCell(0)); int canvasValue1
		 * = Integer.parseInt(canvasCoordinates1);
		 * 
		 * String canvasCoordinates2 =
		 * dataFormatter.formatCellValue(sheet1.getRow(13).getCell(1)); int canvasValue2
		 * = Integer.parseInt(canvasCoordinates2);
		 * 
		 * String canvasCoordinates3 =
		 * dataFormatter.formatCellValue(sheet1.getRow(14).getCell(0)); int canvasValue3
		 * = Integer.parseInt(canvasCoordinates3);
		 * 
		 * String canvasCoordinates4 =
		 * dataFormatter.formatCellValue(sheet1.getRow(14).getCell(1)); int canvasValue4
		 * = Integer.parseInt(canvasCoordinates4);
		 * 
		 * // Input data from excel for Input source String decisionValue1 =
		 * dataFormatter.formatCellValue(sheet1.getRow(7).getCell(2)); int
		 * decisionNumber1 = Integer.parseInt(decisionValue1);
		 * 
		 * String decisionValue2 =
		 * dataFormatter.formatCellValue(sheet1.getRow(7).getCell(3)); int
		 * decisionNumber2 = Integer.parseInt(decisionValue2);
		 * 
		 * String canvasCoordinates5 =
		 * dataFormatter.formatCellValue(sheet1.getRow(15).getCell(0)); int canvasValue5
		 * = Integer.parseInt(canvasCoordinates5);
		 * 
		 * String canvasCoordinates6 =
		 * dataFormatter.formatCellValue(sheet1.getRow(15).getCell(1)); int canvasValue6
		 * = Integer.parseInt(canvasCoordinates6);
		 * 
		 * String canvasCoordinates7 =
		 * dataFormatter.formatCellValue(sheet1.getRow(16).getCell(0)); int canvasValue7
		 * = Integer.parseInt(canvasCoordinates7);
		 * 
		 * String canvasCoordinates8 =
		 * dataFormatter.formatCellValue(sheet1.getRow(16).getCell(1)); int canvasValue8
		 * = Integer.parseInt(canvasCoordinates8);
		 * 
		 * String canvasCoordinates9 =
		 * dataFormatter.formatCellValue(sheet1.getRow(17).getCell(0)); int canvasValue9
		 * = Integer.parseInt(canvasCoordinates9);
		 * 
		 * String canvasCoordinates10 =
		 * dataFormatter.formatCellValue(sheet1.getRow(17).getCell(1)); int
		 * canvasValue10 = Integer.parseInt(canvasCoordinates10);
		 * 
		 * String canvasCoordinates11 =
		 * dataFormatter.formatCellValue(sheet1.getRow(18).getCell(0)); int
		 * canvasValue11 = Integer.parseInt(canvasCoordinates11);
		 * 
		 * String canvasCoordinates12 =
		 * dataFormatter.formatCellValue(sheet1.getRow(18).getCell(1)); int
		 * canvasValue12 = Integer.parseInt(canvasCoordinates12);
		 * 
		 * // Knowledge data from excel for Input source String knowledgeValue1 =
		 * dataFormatter.formatCellValue(sheet1.getRow(7).getCell(4)); int
		 * knowledgeNumber1 = Integer.parseInt(knowledgeValue1);
		 * 
		 * String knowledgeValue2 =
		 * dataFormatter.formatCellValue(sheet1.getRow(7).getCell(5)); int
		 * knowledgeNumber2 = Integer.parseInt(knowledgeValue2);
		 * 
		 * String canvasCoordinates13 =
		 * dataFormatter.formatCellValue(sheet1.getRow(19).getCell(0)); int
		 * canvasValue13 = Integer.parseInt(canvasCoordinates13);
		 * 
		 * String canvasCoordinates14 =
		 * dataFormatter.formatCellValue(sheet1.getRow(19).getCell(1)); int
		 * canvasValue14 = Integer.parseInt(canvasCoordinates14);
		 * 
		 * // Group data from excel for Input source String groupValue1 =
		 * dataFormatter.formatCellValue(sheet1.getRow(7).getCell(6)); int groupNumber1
		 * = Integer.parseInt(groupValue1);
		 * 
		 * String groupValue2 =
		 * dataFormatter.formatCellValue(sheet1.getRow(7).getCell(7)); int groupNumber2
		 * = Integer.parseInt(groupValue2);
		 * 
		 * String canvasCoordinates15 =
		 * dataFormatter.formatCellValue(sheet1.getRow(20).getCell(0)); int
		 * canvasValue15 = Integer.parseInt(canvasCoordinates15);
		 * 
		 * String canvasCoordinates16 =
		 * dataFormatter.formatCellValue(sheet1.getRow(20).getCell(1)); int
		 * canvasValue16 = Integer.parseInt(canvasCoordinates16);
		 * 
		 * // Annotation data from excel for Input source String annotationValue1 =
		 * dataFormatter.formatCellValue(sheet1.getRow(7).getCell(8)); int
		 * annotationNumber1 = Integer.parseInt(annotationValue1);
		 * 
		 * String annotationValue2 =
		 * dataFormatter.formatCellValue(sheet1.getRow(7).getCell(9)); int
		 * annotationNumber2 = Integer.parseInt(annotationValue2);
		 * 
		 * String canvasCoordinates17 =
		 * dataFormatter.formatCellValue(sheet1.getRow(21).getCell(0)); int
		 * canvasValue17 = Integer.parseInt(canvasCoordinates17);
		 * 
		 * String canvasCoordinates18 =
		 * dataFormatter.formatCellValue(sheet1.getRow(21).getCell(1)); int
		 * canvasValue18 = Integer.parseInt(canvasCoordinates18);
		 * 
		 * // information link data from excel String informationLinkValue1 =
		 * dataFormatter.formatCellValue(sheet1.getRow(10).getCell(0)); int
		 * informationLinkNumber1 = Integer.parseInt(informationLinkValue1);
		 * 
		 * String informationLinkValue2 =
		 * dataFormatter.formatCellValue(sheet1.getRow(10).getCell(1)); int
		 * informationLinkNumber2 = Integer.parseInt(informationLinkValue2);
		 * 
		 * // Authority link data from excel String authorityLinkValue1 =
		 * dataFormatter.formatCellValue(sheet1.getRow(10).getCell(3)); int
		 * authorityLinkNumber1 = Integer.parseInt(authorityLinkValue1);
		 * 
		 * String authorityLinkValue2 =
		 * dataFormatter.formatCellValue(sheet1.getRow(10).getCell(4)); int
		 * authorityLinkNumber2 = Integer.parseInt(authorityLinkValue2);
		 * 
		 * // Annotation link data from excel String annotationLinkValue1 =
		 * dataFormatter.formatCellValue(sheet1.getRow(10).getCell(6)); int
		 * annotationLinkNumber1 = Integer.parseInt(annotationLinkValue1);
		 * 
		 * String annotationLinkValue2 =
		 * dataFormatter.formatCellValue(sheet1.getRow(10).getCell(7)); int
		 * annotationLinkNumber2 = Integer.parseInt(annotationLinkValue2);
		 * 
		 * 
		 * // Input Source data 1 act.moveToElement(src1, inputNumber1, inputNumber2);
		 * act.clickAndHold().moveByOffset(inputNumber1, inputNumber2);
		 * act.moveToElement(src1, canvasValue1, canvasValue2);
		 * act.moveToElement(target, canvasValue1, canvasValue2); act.release();
		 * act.perform(); Thread.sleep(3000);
		 * 
		 * // Input Source data 2 act.moveToElement(src1, inputNumber1, inputNumber2);
		 * act.clickAndHold().moveByOffset(inputNumber1, inputNumber2);
		 * act.moveToElement(src1, canvasValue3, canvasValue4);
		 * act.moveToElement(target, canvasValue3, canvasValue4); act.release();
		 * act.perform(); Thread.sleep(3000);
		 * 
		 * // Decision Source data 1 act.moveToElement(src1, decisionNumber1,
		 * decisionNumber2); act.clickAndHold().moveByOffset(decisionNumber1,
		 * decisionNumber2); act.moveToElement(src1, canvasValue5, canvasValue6);
		 * act.moveToElement(target, canvasValue5, canvasValue6); act.release();
		 * act.perform(); Thread.sleep(3000);
		 * 
		 * // Decision Source data 2 act.moveToElement(src1, decisionNumber1,
		 * decisionNumber2); act.clickAndHold().moveByOffset(decisionNumber1,
		 * decisionNumber2); act.moveToElement(src1, canvasValue7, canvasValue8);
		 * act.moveToElement(target, canvasValue7, canvasValue8); act.release();
		 * act.perform(); Thread.sleep(3000);
		 * 
		 * // Decision Source data 3 act.moveToElement(src1, decisionNumber1,
		 * decisionNumber2); act.clickAndHold().moveByOffset(decisionNumber1,
		 * decisionNumber2); act.moveToElement(src1, canvasValue9, canvasValue10);
		 * act.moveToElement(target, canvasValue9, canvasValue10); act.release();
		 * act.perform(); Thread.sleep(3000);
		 * 
		 * // Decision Source data 4 act.moveToElement(src1, decisionNumber1,
		 * decisionNumber2); act.clickAndHold().moveByOffset(decisionNumber1,
		 * decisionNumber2); act.moveToElement(src1, canvasValue11, canvasValue12);
		 * act.moveToElement(target, canvasValue11, canvasValue12); act.release();
		 * act.perform(); Thread.sleep(3000);
		 * 
		 * // Knowledge Source data 1 act.moveToElement(src1, knowledgeNumber1,
		 * knowledgeNumber2); act.clickAndHold().moveByOffset(knowledgeNumber1,
		 * knowledgeNumber2); act.moveToElement(src1, canvasValue13, canvasValue14);
		 * act.moveToElement(target, canvasValue13, canvasValue14); act.release();
		 * act.perform(); Thread.sleep(4000);
		 */

		// Group Item Source data 1
		/*
		 * act.moveToElement(src1, groupNumber1, groupNumber2);
		 * act.clickAndHold().moveByOffset(groupNumber1, groupNumber2);
		 * act.moveToElement(src1, canvasValue15, canvasValue16);
		 * act.moveToElement(target, canvasValue15, canvasValue16); act.release();
		 * act.perform(); Thread.sleep(3000);
		 * 
		 * // Annotation Source data 1 act.moveToElement(src1, annotationNumber1,
		 * annotationNumber2); act.clickAndHold().moveByOffset(annotationNumber1,
		 * annotationNumber2); act.moveToElement(src1, canvasValue17, canvasValue18);
		 * act.moveToElement(target, canvasValue17, canvasValue18); act.release();
		 * act.perform(); Thread.sleep(3000);
		 */
//				

		// click Information Links
		/*
		 * act.moveToElement(LINKS, informationLinkNumber1, informationLinkNumber2);
		 * act.click().build().perform(); Thread.sleep(2000);
		 * 
		 * // Link with the Objects // creating the connection with links between Input
		 * Source 1 & Decision Source 2 act.moveToElement(target, 15, 5);
		 * act.clickAndHold().moveByOffset(15, 5); act.moveByOffset(50, -150);
		 * act.release(); act.perform(); Thread.sleep(2000);
		 * 
		 * // creating the connection with links between Input Source 2 & Decision
		 * Source 3 act.moveToElement(target, 10, 5);
		 * act.clickAndHold().moveByOffset(10, 5); act.moveByOffset(250, -150);
		 * act.release(); act.perform(); Thread.sleep(2000);
		 * 
		 * // creating the connection with links between Input Source 2 & Decision
		 * Source 1 // ok act.moveToElement(target, 10, 5);
		 * act.clickAndHold().moveByOffset(10, 5); act.moveByOffset(-200, -150);
		 * act.release(); act.perform(); Thread.sleep(2000);
		 * 
		 * // creating the connection with links between Decision Source 3 & Decision //
		 * Source 4 act.moveToElement(target, -100, -100);
		 * act.clickAndHold().moveByOffset(-100, -100); act.moveByOffset(50, -100);
		 * act.release(); act.perform(); Thread.sleep(2000);
		 * 
		 * // creating the connection with links between Decision Source 2 & Decision //
		 * Source 4 act.moveToElement(target, 105, -100);
		 * act.clickAndHold().moveByOffset(105, -100); act.moveByOffset(-300, -100);
		 * act.release(); act.perform(); Thread.sleep(2000);
		 * 
		 * // creating the connection with links between Decision Source 1 & Decision //
		 * Source 4 act.moveToElement(target, -200, -150);
		 * act.clickAndHold().moveByOffset(-200, -150); act.moveByOffset(300, -100);
		 * act.release(); act.perform(); Thread.sleep(2000);
		 * 
		 * // click Authority Links act.moveToElement(LINKS, authorityLinkNumber1,
		 * authorityLinkNumber2); act.click().build().perform(); Thread.sleep(2000);
		 * 
		 * // creating the connection with links between knowledge source & Decision
		 * data 2 act.moveToElement(target, 20, -100);
		 * act.clickAndHold().moveByOffset(20, -100); act.moveByOffset(200, -150);
		 * act.release(); act.perform(); Thread.sleep(2000);
		 * 
		 * // click Annotation link act.moveToElement(LINKS, annotationLinkNumber1,
		 * annotationLinkNumber2); act.click().build().perform(); Thread.sleep(3000); //
		 * // creating the connection with links between annotation Source 1 & Decision
		 * // Source 1 act.moveToElement(target, 70, 100);
		 * act.clickAndHold().moveByOffset(70, 100); act.moveByOffset(250, -150);
		 * act.release(); act.perform(); Thread.sleep(2000);
		 */

		workbook.close();

	}

	@Test(priority = 3)
	public void exportProject() throws InterruptedException, IOException {

		// Get the Projet & Tag data form Excel Sheet
		File src = new File("./Test Data/TestData.xlsx");
		FileInputStream fis = new FileInputStream(src);
		XSSFWorkbook workbook = new XSSFWorkbook(fis);

		XSSFSheet sheet = workbook.getSheet("AddDiagramWithObjectsAndLinks");

		String exportType = sheet.getRow(1).getCell(13).getStringCellValue();

		driver.findElement(By.xpath(
				"/html/body/dfm-root/dfm-main-container/nb-layout/div/div/div/div/div/nb-layout-column/dfm-tabs-container/div/div/div[2]/dfm-folders-tags-management-container/nb-card/div/div[2]/dfm-related-object-grid-view/div/wj-flex-grid/div[1]/div[3]/div/div[2]/div"))
				.click();
		Thread.sleep(3000);
		driver.findElement(By.xpath("//img[@class='object-control-item']")).click();
		Thread.sleep(2000);

		WebElement rbutton = driver.findElement(By.xpath(exportType));
		rbutton.click();
		driver.findElement(By.xpath("//button[normalize-space()='Export']")).click();
		//Thread.sleep(15000);
		{
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(50));
			String Message =	wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@class='toastr-overlay-container cdk-global-overlay-wrapper']"))).getText();
			System.out.println("Message after export the project is : " + Message);
		}
		
		
	}

	@Test(priority = 4)
	public void searchProject() throws InterruptedException, IOException {

		// Get the Projet & Tag data form Excel Sheet
		File src = new File("./Test Data/TestData.xlsx");
		FileInputStream fis = new FileInputStream(src);
		XSSFWorkbook workbook = new XSSFWorkbook(fis);

		XSSFSheet sheet = workbook.getSheet("AddDiagramWithObjectsAndLinks");
		String searchProject = sheet.getRow(1).getCell(3).getStringCellValue();

		driver.findElement(By.id("search-ip")).clear();
		driver.findElement(By.id("search-ip")).click();
		// 11 | type | id=search-ip | dummy
		driver.findElement(By.id("search-ip")).sendKeys(searchProject);
		Thread.sleep(2000);
	}

	@Test(priority = 5)

	public void addTagAndImportFile() throws IOException, InterruptedException, AWTException {

		// identify element

		// Get the Projet & Tag data form Excel Sheet
		File src = new File("./Test Data/TestData.xlsx");
		FileInputStream fis = new FileInputStream(src);
		XSSFWorkbook workbook = new XSSFWorkbook(fis);

		XSSFSheet sheet = workbook.getSheet("AddDiagramWithObjectsAndLinks");

		String projectName1 = sheet.getRow(1).getCell(4).getStringCellValue();
		String tagName = sheet.getRow(2).getCell(5).getStringCellValue();
		String tagDescription = sheet.getRow(1).getCell(6).getStringCellValue();
		String tagXpath = sheet.getRow(2).getCell(7).getStringCellValue();

		WebElement l = driver.findElement(By.xpath(projectName1));
		Actions a = new Actions(driver);
		a.moveToElement(l).contextClick().build().perform();
		Thread.sleep(2000);

		// 13 | click | css=.rich-text-editor-focus p |
		driver.findElement(By.xpath("//div[contains(text(),'Add Tag')]")).click();

		driver.findElement(By.xpath("//core-edit-multiple-lines-control[@id='name']//div[@class='ql-editor ql-blank']"))
				.sendKeys(tagName);

		driver.findElement(
				By.xpath("//core-edit-multiple-lines-control[@id='description']//div[@class='ql-editor ql-blank']"))
				.sendKeys(tagDescription);

		// 17 | click | css=.btn-block |
		driver.findElement(By.xpath("//button[contains(.,'Add Tag')]")).click();
		Thread.sleep(5000);

		driver.findElement(By.xpath("//span[@class='wj-node-text has-text']")).click();

		WebElement tag = driver.findElement(By.xpath(tagXpath));
		Actions a1 = new Actions(driver);
		a1.moveToElement(tag).contextClick().build().perform();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//div[contains(text(),'Import File')]")).click();
		Thread.sleep(2000);
		
		WebElement fileInput = driver.findElement(By.xpath("//button[@class='file-upload-button appearance-filled size-medium shape-rectangle status-basic nb-transition']"));
		fileInput.click();
//		Thread.sleep(2000);
//		fileInput.sendKeys("/path/to/file.jpg");
		
		// UPLOADING FILE USING AutoIT....
	     
//	    WebElement browser = driver.findElement(By.xpath("//button[@class='file-upload-button appearance-filled size-medium shape-rectangle status-basic nb-transition']"));   //Browse button
//	    browser.click();                                
//	    System.out.println("1");
	 
	 
//	  Runtime.getRuntime().exec("C:\\Users\\Nitesh\\Downloads\\Test Validate Diagram (1).dmn");
//	  System.out.println("2");
//	  Thread.sleep(3000);
	 
//	  WebElement upload = driver.findElement(By.xpath("//*[@id=\"cdk-overlay-0\"]/nb-dialog-container/dfm-import-file/nb-card/div[2]/div[2]/button"));            //Upload button
//	   upload.click();
//	   System.out.println("3");
	   
	   Robot rb = new Robot();
	   
	    // copying File path to Clipboard
	    StringSelection str = new StringSelection("C:\\Users\\Nitesh\\Downloads\\Test Validate Diagram (1).dmn");
	    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(str, null);
	    Thread.sleep(4000);
	 
	     // press Contol+V for pasting
	     rb.keyPress(KeyEvent.VK_CONTROL);
	     rb.keyPress(KeyEvent.VK_V);
	 
	    // release Contol+V for pasting
	    rb.keyRelease(KeyEvent.VK_CONTROL);
	    rb.keyRelease(KeyEvent.VK_V);
	 
	    // for pressing and releasing Enter
	    rb.keyPress(KeyEvent.VK_ENTER);
	    rb.keyRelease(KeyEvent.VK_ENTER);
	    Thread.sleep(2000);
	    
		driver.findElement(By.xpath("//button[normalize-space()='Import']")).click();
		{
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(50));
			String Message =	wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//nb-toast[@class='ng-tns-c194-0 ng-trigger ng-trigger-fadeIn status-success destroy-by-click has-icon custom-icon ng-star-inserted']"))).getText();
			System.out.println("Message after import the project is : " + Message);
		}
	   }
	

	       @Test(priority = 6)   
	       public void validate() throws InterruptedException {
	    	  
	    	   Thread.sleep(4000);
	    	   Actions action = new Actions(driver);
	    	   action.moveToElement(driver.findElement(By.xpath("/html/body/dfm-root/dfm-main-container/nb-layout/div/div/div/div/div/nb-layout-column/dfm-tabs-container/div/div/div[2]/dfm-folders-tags-management-container/nb-card/div/div[2]/dfm-related-object-grid-view/div/wj-flex-grid/div[1]/div[1]/div[1]/div[9]/div[1]"))).doubleClick().build().perform();
	    	   Thread.sleep(8000);
	    	   WebElement target = driver.findElement(By.xpath(
	   				"/html/body/dfm-root/dfm-main-container/nb-layout/div/div/div/div/div/nb-layout-column/dfm-tabs-container/div/div/div[3]/dfm-view-diagram-container/div/div/dfm-go-js-display-diagram/div/div/canvas"));
	    	  // WebElement target = driver.findElement(By.xpath("//div[@class='diagramDiv']//canvas"));
	    	   Actions act = new Actions(driver);
	    	// Click Outside
//	   		act.moveToElement(target, -1, -1);
//	   		act.click().build().perform();
//	   		Thread.sleep(5000);
	   		// Input data source 2
	   		act.moveToElement(target, 255, -145);
	   		act.click().build().perform();
	   		Thread.sleep(2000);
	   		String expected_value6 = driver.findElement(By.cssSelector("div[class='ql-editor'] p")).getText();
	   		System.out.println("Value fetched before validation is :- " + expected_value6);
	   		//Assert.assertEquals(decisionName4, expected_value6, "The Object is not matched");
	       }
}
